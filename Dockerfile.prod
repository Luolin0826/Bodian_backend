# --- 阶段 1: 构建阶段 ---
FROM python:3.11-slim-bookworm AS builder

# 设置环境变量 (已修正警告)
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1

WORKDIR /app

# ✅ 【关键修改】更换为阿里云的 Debian 镜像源
RUN sed -i 's/deb.debian.org/mirrors.aliyun.com/g' /etc/apt/sources.list.d/debian.sources

# 安装构建依赖
RUN apt-get update && apt-get install -y --no-install-recommends \
    gcc \
    g++ \
    python3-dev \
    default-libmysqlclient-dev \
    pkg-config \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

# 更换为阿里云pypi源
RUN pip config set global.index-url https://mirrors.aliyun.com/pypi/simple/ && \
    pip config set global.trusted-host mirrors.aliyun.com

# 复制依赖文件并安装
COPY requirements.txt .
RUN pip install --no-cache-dir --prefix=/install -r requirements.txt


# --- 阶段 2: 运行阶段 ---
FROM python:3.11-slim-bookworm

# 设置环境变量 (已修正警告)
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    FLASK_ENV=production \
    PYTHONPATH=/app

WORKDIR /app

# ✅ 【关键修改】同样更换为阿里云的 Debian 镜像源
RUN sed -i 's/deb.debian.org/mirrors.aliyun.com/g' /etc/apt/sources.list.d/debian.sources

# 只安装【纯粹的运行时】系统依赖
RUN apt-get update && apt-get install -y --no-install-recommends \
    mariadb-client \
    curl \
    netcat-traditional \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

# 从构建阶段拷贝已经安装好的Python依赖包
COPY --from=builder /install /usr/local

# 复制应用代码
COPY app ./app
COPY wsgi.py .
COPY updated_recruitment_api.py .
COPY frontend_analytics_api.py .
COPY data_search_api.py .

# 创建日志目录和非root用户
RUN mkdir -p /app/logs && \
    useradd -m -u 1000 appuser && \
    chown -R appuser:appuser /app

USER appuser

# 健康检查和端口声明
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:5000/api/health || exit 1
EXPOSE 5000

# 使用 Gunicorn 启动，配置更详细的日志
CMD ["python", "-m", "gunicorn", \
     "-w", "1", \
     "-k", "gevent", \
     "-b", "0.0.0.0:5000", \
     "--access-logfile", "-", \
     "--error-logfile", "-", \
     "--log-level", "debug", \
     "--preload", \
     "--timeout", "120", \
     "wsgi:app"]